#include "Map.h"
#include "Dice.h"
#include <iostream>
#include <stdlib.h>
#include <ctime>
#include <sstream>
#include<vector>
#include"Item.h"
#include"Character.h"
#include"CharacterItemContainers.h"
#pragma warning(disable: 4996)
#include"ConsoleLogger.h"
#include <windows.h> 
#include <stdio.h> 
#include<cstdlib>
using namespace std;

bool firstMove = true;	//Used to determine if the player has moved yet.
static const int MAX_DOOR = 1;		//Number of maximum doors generated by the random map
Map::Map()
{
}

Map::Map(int l, int h) {
	// Initialize variables
	length = l + 2;
	height = h + 2;


	// Create 2D array
	mArr = new char*[length];
	for (int i = 0; i < length; i++)
		mArr[i] = new char[length];

	// Fill the array with empty spaces (=)
	for (int i = 0; i < length; i++) {
		for (int j = 0; j < height; j++)
			mArr[i][j] = '=';
		// Set up initial walls around
		for (int i = 0; i < height; i++) {
			mArr[i][0] = '|';
			mArr[i][height - 1] = '|';
		}
		for (int j = 0; j < length; j++) {
			mArr[0][j] = '-';
			mArr[length - 1][j] = '-';
		}
		// Set up corners
		mArr[0][0] = '+';
		mArr[length - 1][0] = '+';
		mArr[0][height - 1] = '+';
		mArr[length - 1][height - 1] = '+';
	}


}

void showMap(Map m)
{
	for (int i = 0; i < m.length; i++)
	{
		for (int j = 0; j < m.height; j++)
		{
			cout << m.mArr[i][j];
		}
		cout << endl;
	}
}


string Map::showMap() {
	// Create string stream to create data
	stringstream sstream;
	for (int i = 0; i < length; i++)
		sstream << endl << endl << endl;

	for (int i = 0; i < height; i++) {
		for (int j = 0; j < length; j++)
			sstream << mArr[i][j] << " ";
		sstream << endl << endl;
	}

	return sstream.str();
}

bool validatePath(Map m)
{
	for (int i = 0; i < m.length; i++)
	{
		for (int j = 0; j < m.height; j++)
		{
			if (m.mArr[i][j] == 'd') // 'd' is for door
			{
				return true;
			}
		}
	}
	return false;
}

void fillCell(int x, int y, char obj, Map &m)
{
	m.mArr[x][y] = obj;
}

bool isOccupied(int x, int y, Map m)
{
	if (m.mArr[x][y] != '=')
	{
		return true;
	}
	return false;
}

int getLength(Map m)
{
	return m.length;
}
int getHeight(Map m)
{
	return m.height;
}

char** getMapElements(Map map)
{
	return map.mArr;
}

void setLength(int x, Map map) {
	map.length = x;
}

void setHeight(int y, Map map) {
	map.height = y;
}


void makeRandomMap(Map &m)
{
	int characterStart = 0;
	int maxDoor = 0;
	srand(time(NULL));
	for (int i = 1; i < getLength(m) - 1; i++)
	{

		for (int j = 1; j < getHeight(m) - 1; j++)
		{

			int num = (rand() % 100);
			if (num < 80)
			{
				fillCell(i, j, '=', m); //'=' is free space
			}
			else if (num >= 80 && num < 85)
			{
				if (characterStart == 0) {
					fillCell(i, j, '@', m);	//'@' is for character
					characterStart++;
				}
				else if (maxDoor < MAX_DOOR)
				{
					fillCell(i, j, 'd', m); // 'd' is for door
					maxDoor++;
				}
				else
					fillCell(i, j, '=', m); // free space for limit door
			}

			else if (num >= 85 && num < 90) {
				fillCell(i, j, 'c', m);	//'c' is for chest
			}

			else if (num >= 90 && num < 95) {
				fillCell(i, j, 'm', m);	//m is for monster
			}

			else
			{
				fillCell(i, j, '*', m);	//* is for wall
			}

		}

	}
}

ostream & operator<<(ostream &stream, Map &m)
{
	// TODO: insert return statement here
	stream << m.showMap();
	return stream;
}




// Move the character in the game
bool Map::move(char dir, Map m,Character * &player, int currentMap)
{
	
	for (int i = 1; i < getLength(m) - 1; i++)
	{

		for (int j = 1; j < getHeight(m) - 1; j++)
		{
			if (m.mArr[i][j] == '@')
			{
				tempX = i;
				tempY = j;
			}
			if (m.mArr[i][j] == 'm')
			{
				tempsX = i;
				tempsY = j;
			}
		}
	}
	playerX = tempX;
	playerY = tempY;
	monsterX = tempsX;
	monsterY = tempsY;
	cout << "monster " << monsterX << " " << monsterY << endl;
	mArr[tempX][tempY] = current;

	if (dir == 'd' || dir == 'D')
	{

		tempY = tempY + 1;

	}
	else if (dir == 'w' || dir == 'W')
	{

		tempX = tempX - 1;

	}
	else if (dir == 'a' || dir == 'A')
	{

		tempY = tempY - 1;

	}
	else if (dir == 's' || dir == 'S')
	{
		tempX = tempX + 1;

	}
	else if (dir == 'i' || dir == 'I') {
		CConsoleLoggerEx items;
		items.Create("Backpack and equipped items");
		items.cls(CConsoleLoggerEx::COLOR_BACKGROUND_BLUE);
		string str;
		str = backpack.displayInventory();
		const char *c = str.c_str();
		items.cprintf(CConsoleLoggerEx::COLOR_WHITE | CConsoleLoggerEx::COLOR_BACKGROUND_BLUE, "Backpack\n");
		items.cprintf(CConsoleLoggerEx::COLOR_WHITE | CConsoleLoggerEx::COLOR_BACKGROUND_BLUE, c);
		str = equipped.displayInventory();
		c = str.c_str();
		items.cprintf(CConsoleLoggerEx::COLOR_WHITE | CConsoleLoggerEx::COLOR_BACKGROUND_BLUE, "Equipped items\n");
		items.cprintf(CConsoleLoggerEx::COLOR_WHITE | CConsoleLoggerEx::COLOR_BACKGROUND_BLUE, c);
		int choice;
		cout << "Displaying Backpack and Equipped Items." << endl;
		do {
			cout << "Press 1 to remove an equipped item." << endl;
			cout << "Press 2 to equip an item from the backpack" << endl;
			cout << "Press 3 to stop." << endl;
			cin >> choice;

			if (choice == 1) {	//Remove an equipped item.
				do {
					cout << "Please enter the slot of the item that you would like to remove." << endl;
					cin >> choice;
					if (choice < 0 || choice > equipped.v.size())
						cout << "Out of bounds. Please enter a non negative number and a number smaller than " << equipped.v.size() << endl;
					else {
							addItem(backpack, equipped.v[choice]);	//Putting the item into the backpack.
							string itemType;
							itemType = equipped.v[choice].type;	//Getting the type of item from the equipped vector.
							player->remove(itemType);
							
					}
				} while ((choice < 0 || choice > equipped.v.size()));
					
			}

			if (choice == 2) {	//Equip an item from the backpack.
				do {
					cout << "Please enter the slot of the backpack item that you would like to equip." << endl;
					cin >> choice;
					if (choice < 0 || choice > backpack.v.size())
						cout << "Out of bounds. Please enter a non negative number and a number smaller than " << backpack.v.size() << endl;
					else {//Using decorator pattern to create character with equipped item.
						player = new Item(player, backpack.v[choice].type, backpack.v[choice].enhancement, backpack.v[choice].bonus);
						player->wear(backpack.v[choice].type);
					}
				} while ((choice < 0 || choice > backpack.v.size()));
			}
		} while (choice != 3);
	}

	else if (dir == 'o' || dir == 'O')
	{
		cout << player->maxHitPoints << "max hp" << endl;
		string str;
		str = player->name;
		str += " stats";
		const char *c = str.c_str();
		CConsoleLoggerEx characterStats;
		characterStats.Create(c);
		characterStats.cls(CConsoleLoggerEx::COLOR_BACKGROUND_GREEN);
		str = player->printCharDetailsSheet();
		c = str.c_str();
		characterStats.cprintf(c);

	}
	//	cout << nums << endl;
	// Moveable location
	if (mArr[tempX][tempY] == '=') {
		playerX = tempX;
		playerY = tempY;

	}
	else if (mArr[tempX][tempY] == 'm')
	{

		char mchoice;
	
		cout << "(press enter to flush the movement input)" << endl;
		string choice1;	
		cin.ignore(); // ignores \n that cin >> str has lefted (if user pressed enter key)
		std::getline(cin, choice1);
		do
		{
			cout << " Monster is engaging, What do you want to do ?" << endl;
			cout << "(f)ight  or (r)un?  // to escape need a roll of d20 and higher than 13" << endl;
			cin >> mchoice;
			if (mchoice == 'f')
			{
				int n;
				Dice d = Dice();
				std::cout << "Rolling a d10 1 times." << endl;
				n = d.roll("1d10");
				std::cout << "Result: " << n << endl;
				if (n > 6)
				{
					mArr[tempX][tempY] = '=';
					cout << " You defeated the monster !!" << endl;
					player->gainExp(300 + currentMap *1000);
					Sleep(1);
					break;
				}
				else
				{

					player->hit(5 + currentMap*5);
					cout << "Your attack missed. The monster damaged you!" << endl;
					cout << player->name<<" has "<< player->currentHitPoints <<" HP remaining"<< endl;
					if (player->currentHitPoints <= 0) {
						cout << "Game over. You died.";
						cin >> choice1;
						exit(0);
					}
				}

				cout << " Keep fighting ? press (f) else (r) to run  " << endl;
				cin >> mchoice;
			}
			else if (mchoice == 'r')
			{
				int n;
				Dice d = Dice();
				std::cout << "Rolling a d20 1 times." << endl;
				n = d.roll("1d20");
				std::cout << "Result: " << n << endl;
				if (n > 13)
				{
					cout << " You escaped the monster." << endl;
					break;
				}
				else
				{
					cout << " You didn't escape, need to roll higher than 13, now engage with monster !" << endl;
					mchoice = 'f';
				}
			}
		} while (mchoice == 'f');

		return false;
	}


	else if (mArr[tempX][tempY] == 'c')
	{	
		int choice;
		Item chestItem = openChest(dir,player);
		if (chestItem.type == "") {	//If the box was not opened then the item is empty, so we can continue playing the game.
			cout << "Press any key to continue the game!" << endl;
			string str;
			cin >> str;
		}
		else {
			do {
				cout << "Would you like to equip the item (1) or put it in your backpack (2) or throw it away(3)?" << endl;
				cin >> choice;
				if (choice != 1 && choice != 2 && choice != 3)
					cout << "Invalid input.Please enter 1 to equip the item,'\n' 2 to put it inside the backpack'\n' or 3 to throw it away. " << endl;
			} while (choice != 1 && choice != 2 && choice != 3);

			if (choice == 1) {
				//Verify if the item is already being worn.
				player = new Item(player, chestItem.type, chestItem.enhancement, chestItem.bonus);
				if (!player->wear(chestItem.type)) {	//Is true if item slot is already occupied (new chest item not equipped).	
					cout << "Would you like to swap the current equipped item with the new chest item?" << endl;

					do {
						cout << "Press 1 to swap the item or 2 to send the new item to the backpack." << endl;
						cin >> choice;
						if (choice != 1 && choice != 2)
							cout << "Invalid input.Please enter 1 to swap the item or 2 to put it in the backpack. " << endl;
					} while (choice != 1 && choice != 2);

					if (choice == 1) {	//Swap the items (remove the current equipped item and put it inside the backpack and equip the new chest item).
						//First find the slot of the equipped item. Then send it to the backpack vector and remove it from equipped and finally wear the new chest item.
						for (unsigned int i = 0; i < equipped.v.size(); i++) {
							if (equipped.v[i].type == chestItem.type) {
								addItem(backpack, getItem(equipped, i));
								player->remove(chestItem.type);
								player = new Item(player, chestItem.type, chestItem.enhancement, chestItem.bonus);
								player->wear(chestItem.type);
								break;
							}
						}
					}

					if (choice == 2) {	//Send new chest item to the backpack.
						addItem(backpack, chestItem);
					}

					if (choice == 3) {	//Throw away the item.

					}
				}
			}
		}
	}

	// Moved onto door goes to next map.
	else if (mArr[tempX][tempY] == 'd') {
		playerX = tempX;
		playerY = tempY;
		current = mArr[playerX][playerY];
		mArr[playerX][playerY] = '@';
		if (player->level < 2)
		{
			player->levelUp();
			player->exp = 300;
		}
		else if (player->level < 3)
		{
			player->levelUp();
			player->exp = 900;
		}
		else if (player->level < 4)
		{
			player->levelUp();
			player->exp = 2700;
		}
		else if (player->level < 5)
		{
			player->levelUp();
			player->exp = 6500;
		}
		else if (player->level < 6)
		{
			player->levelUp();
			player->exp = 14000;
		}
		else if (player->level < 7)
		{
			player->levelUp();
			player->exp = 23000;
		}
		else if (player->level < 8)
		{
			player->levelUp();
			player->exp = 34000;
		}
		else if (player->level < 9)
		{
			player->levelUp();
			player->exp = 48000;
		}
		else if (player->level < 10)
		{
			player->levelUp();
			player->exp = 64000;
		}
		else if (player->level < 11)
		{
			player->levelUp();
			player->exp = 85000;
		}
		else if (player->level < 12)
		{
			player->levelUp();
			player->exp = 100000;
		}
		else if (player->level < 13)
		{
			player->levelUp();
			player->exp = 120000;
		}
		else if (player->level < 14)
		{
			player->levelUp();
			player->exp = 140000;
		}
		else if (player->level < 15)
		{
			player->levelUp();
			player->exp = 165000;
		}
		else if (player->level < 16)
		{
			player->levelUp();
			player->exp = 195000;
		}
		else if (player->level < 17)
		{
			player->levelUp();
			player->exp = 225000;
		}
		else if (player->level < 18)
		{
			player->levelUp();
			player->exp = 265000;
		}
		else if (player->level < 19)
		{
			player->levelUp();
			player->exp = 305000;
		}
		else if (player->level < 20)
		{
			player->levelUp();
			player->exp = 335000;
		}
		cout << player->name << " is leveling up! " << endl;
		notify();
		return true;
	}

	current = mArr[playerX][playerY];
	//currents = mArr[monsterX][monsterY];
	mArr[playerX][playerY] = '@';
	//mArr[monsterX][monsterY] = 'm';
	notify();
	system("CLS");
	showMap();
	return false;
}


Item Map::openChest(char dir, Character *& player)
{	
	Item chestItem;
	cout << " Open the chest?  (Y)es/(N)o (press enter to flush the movement input)" << endl;

	string choice1;
	cin.ignore(); // ignores \n that cin >> str has lefted (if user pressed enter key)
	std::getline(cin,choice1);
	cin >> choice1;
	char choice = choice1[0];
	if (choice == 'N' || choice == 'n')
	{
		cout << "Left without the opening the chest" << endl;
		return chestItem;
	}
	else if (choice == 'Y' || choice == 'y')
	{
		cout << "chestX: " << tempX << "  chestY:  " << tempY << endl;
		if (dir == 'd' || dir == 's' || dir == 'a' || dir == 'w')
		{

			mArr[tempX][tempY] = 'o';
			cout << "Chest opened" << endl;
			Dice d = Dice();
			std::cout << "Rolling a d100 1 times." << endl;
			int n = d.roll("1d100");
			std::cout << "Result: " << n << endl;
			Item cItem = Item();
			if (n < 50)
			{
				cout << " You received : " << endl;
				string cItemr;
				cItemr = cItem.randomItem();
				cout << "cITEMr : " << cItemr << endl;
				if (cItemr == "helmet")
				{
					chestItem = Item(cItemr, { 3 }, { "INT" });
				}
				else if (cItemr == "armor")
				{
					chestItem = Item(cItemr, { 5 }, { "ARMORCLASS" });
				}
				else if (cItemr == "shield")
				{
					chestItem = Item(cItemr, { 7 }, { "ARMORCLASS" });
				}
				else if (cItemr == "ring")
				{
					chestItem = Item(cItemr, { 8 }, { "CHA" });
				}
				else if (cItemr == "belt")
				{
					chestItem = Item(cItemr, { 5 }, { "CON" });
				}
				else if (cItemr == "boots")
				{
					chestItem = Item(cItemr, { 5 }, { "DEX" });
				}
				else if (cItemr == "weapon")
				{
					chestItem = Item(cItem.randomItem(), { 3 }, { "ATKBONUS" });
				}
				if (itemCheck(chestItem) == true)
				{
					cout << " ITEM WEAK : " << chestItem << endl;
				}
				else
					cout << " UNLUCKY ! A racoon just stole your item !!" << endl;
			}
			else if (n >= 50 && n < 75)
			{
				cout << " You received : " << endl;
				string cItemr;
				cItemr = cItem.randomItem();
				cout << "cITEMr : " << cItemr << endl;
				if (cItemr == "helmet")
				{
					chestItem = Item(cItemr, { 5 }, { "INT" });
				}
				else if (cItemr == "armor")
				{
					chestItem = Item(cItemr, { 7 }, { "ARMORCLASS" });
				}
				else if (cItemr == "shield")
				{
					chestItem = Item(cItemr, { 9 }, { "ARMORCLASS" });
				}
				else if (cItemr == "ring")
				{
					chestItem = Item(cItemr, { 10 }, { "CHA" });
				}
				else if (cItemr == "belt")
				{
					chestItem = Item(cItemr, { 8 }, { "CON" });
				}
				else if (cItemr == "boots")
				{
					chestItem = Item(cItemr, { 9 }, { "DEX" });
				}
				else if (cItemr == "weapon")
				{
					chestItem = Item(cItem.randomItem(), { 9 }, { "ATKBONUS" });
				}
				if (itemCheck(chestItem) == true)
				{
					cout << " ITEM OOKAY : " << chestItem << endl;
				}
				else
					cout << " UNLUCKY ! A racoon just stole your item !!" << endl;
			}
			else if (n >= 75 && n < 98)
			{
				cout << " You received : " << endl;
				string cItemr;
				cItemr = cItem.randomItem();
				cout << "cITEMr : " << cItemr << endl;
				if (cItemr == "helmet")
				{
					chestItem = Item(cItemr, { 11 }, { "INT" });
				}
				else if (cItemr == "armor")
				{
					chestItem = Item(cItemr, { 17 }, { "ARMORCLASS" });
				}
				else if (cItemr == "shield")
				{
					chestItem = Item(cItemr, { 14 }, { "ARMORCLASS" });
				}
				else if (cItemr == "ring")
				{
					chestItem = Item(cItemr, { 13 }, { "CHA" });
				}
				else if (cItemr == "belt")
				{
					chestItem = Item(cItemr, { 10 }, { "CON" });
				}
				else if (cItemr == "boots")
				{
					chestItem = Item(cItemr, { 12 }, { "DEX" });
				}
				else if (cItemr == "weapon")
				{
					chestItem = Item(cItem.randomItem(), { 14 }, { "ATKBONUS" });
				}
				if (itemCheck(chestItem) == true)
				{
					cout << " ITEM GREAT : " << chestItem << endl;
				}
				else
					cout << " UNLUCKY ! A racoon just stole your item !!" << endl;
			}
			else if (n >= 98 && n < 100)
			{
				cout << " You received : " << endl;
				string cItemr;
				cItemr = cItem.randomItem();
				cout << "cITEMr : " << cItemr << endl;
				if (cItemr == "helmet")
				{
					chestItem = Item(cItemr, { 24 }, { "INT" });
				}
				else if (cItemr == "armor")
				{
					chestItem = Item(cItemr, { 30 }, { "ARMORCLASS" });
				}
				else if (cItemr == "shield")
				{
					chestItem = Item(cItemr, { 29 }, { "ARMORCLASS" });
				}
				else if (cItemr == "ring")
				{
					chestItem = Item(cItemr, { 22 }, { "CHA" });
				}
				else if (cItemr == "belt")
				{
					chestItem = Item(cItemr, { 25 }, { "CON" });
				}
				else if (cItemr == "boots")
				{
					chestItem = Item(cItemr, { 27 }, { "DEX" });
				}
				else if (cItemr == "weapon")
				{
					chestItem = Item(cItem.randomItem(), { 22 }, { "ATKBONUS" });
				}
				if (itemCheck(chestItem) == true)
				{
					cout << " ITEM LEGENDARY : " << chestItem << endl;
				}
				else
					cout << " UNLUCKY ! A racoon just stole your item !!" << endl;
			}
		}


	}
	cout << "Press any key to continue the game!" << endl;
	cin >> choice;
	return chestItem;
}


